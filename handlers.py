import logging
from aiogram import types, Dispatcher
from aiogram.enums import ChatActions
from openai_client import generate_image

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ /start –∏ /help
async def send_welcome(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º —Ä—É—Å—Å–∫–∏–º, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å, "
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω–∞—Ä–∏—Å—É–π —É–ª—ã–±–∞—é—â–µ–≥–æ—Å—è —Ä–æ–±–æ—Ç–∞¬ª. –Ø –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DALL¬∑E-3 –∏ –ø—Ä–∏—à–ª—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞!"
    )

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤-–ø—Ä–æ–º–ø—Ç–æ–≤
async def handle_prompt(message: types.Message):
    prompt = message.text.strip()
    if not prompt:
        return

    # 1. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å ¬´—Ä–∏—Å—É—é¬ª
    await message.bot.send_chat_action(message.chat.id, ChatActions.UPLOAD_PHOTO)

    # 2. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
    try:
        image_url = generate_image(
            prompt=prompt,
            model="dall-e-3",
            size="512x512",
            n=1
        )
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await message.reply("üò¢ –£–ø—Å, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.")
        return

    # 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
    await message.bot.send_photo(chat_id=message.chat.id, photo=image_url)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤

def register_handlers(dp: Dispatcher):
    dp.message.register(send_welcome, commands=['start', 'help'])
    dp.message.register(handle_prompt)
